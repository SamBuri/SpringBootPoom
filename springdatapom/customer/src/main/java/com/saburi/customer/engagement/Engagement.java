/*
 Sam Buriima
generated by Saburi Tools
*/
package com.saburi.customer.engagement;

 import java.util.Objects;
 import javax.persistence.Column;
 import javax.persistence.Entity;
  import javax.persistence.Table;
 import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import com.saburi.root.entities.DBEntityIncID;
import com.saburi.root.dtos.ResponseData;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import javax.persistence.OneToOne;
import com.saburi.customer.customer.Customer;
import java.time.LocalDate;
import com.saburi.customer.enums.EngagementReasons;
import javax.persistence.Enumerated;
import javax.persistence.EnumType;
import com.saburi.customer.enums.EngagementModes;
import javax.validation.constraints.Size;
import com.saburi.customer.engagementmodes.EngagementModes;
import com.saburi.customer.engagement.Engagement;


@Entity

@Table(name = "engagements")
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
public class Engagement extends DBEntityIncID<Long> implements ResponseData{

@OneToOne
@JoinColumn(name = "customerId",foreignKey = @ForeignKey(name = "fkCustomerIdEngagement"))private Customer customer;
private LocalDate engagementDate;
@Enumerated(EnumType.STRING)
@Column(length = 100)private EngagementReasons engagementReason;
@Enumerated(EnumType.STRING)
@Column(length = 100)private EngagementModes engagementMode;
@Size(max =  100, message =  "The field: Description size cannot be greater than 100")
@Column(length =  100)
private String description;
@Size(max =  100, message =  "The field: Attending Personnel size cannot be greater than 100")
@Column(length =  100)
private String attendingPersonnel;
private String status;
private  nextEngagementDate;
@OneToOne
@JoinColumn(name = "expectedNextEngagementModeId",foreignKey = @ForeignKey(name = "fkExpectedNextEngagementModeIdEngagement"))private EngagementModes expectedNextEngagementMode;
@OneToOne
@JoinColumn(name = "parentEngagementId",foreignKey = @ForeignKey(name = "fkParentEngagementIdEngagement"))private Engagement parentEngagement;

public Engagement(){
}
public  Engagement(Customer customer,LocalDate engagementDate,EngagementReasons engagementReason,EngagementModes engagementMode,String description,String attendingPersonnel,String status, nextEngagementDate,EngagementModes expectedNextEngagementMode,Engagement parentEngagement){
 this.customer = customer;
this.engagementDate = engagementDate;
this.engagementReason = engagementReason;
this.engagementMode = engagementMode;
this.description = description;
this.attendingPersonnel = attendingPersonnel;
this.status = status;
this.nextEngagementDate = nextEngagementDate;
this.expectedNextEngagementMode = expectedNextEngagementMode;
this.parentEngagement = parentEngagement;

}

public Customer getCustomer(){
 return customer;
}
public void setCustomer(Customer customer){
this.customer = customer;
}public LocalDate getEngagementDate(){
 return engagementDate;
}
public void setEngagementDate(LocalDate engagementDate){
this.engagementDate = engagementDate;
}public EngagementReasons getEngagementReason(){
 return engagementReason;
}
public void setEngagementReason(EngagementReasons engagementReason){
this.engagementReason = engagementReason;
}public EngagementModes getEngagementMode(){
 return engagementMode;
}
public void setEngagementMode(EngagementModes engagementMode){
this.engagementMode = engagementMode;
}public String getDescription(){
 return description;
}
public void setDescription(String description){
this.description = description;
}public String getAttendingPersonnel(){
 return attendingPersonnel;
}
public void setAttendingPersonnel(String attendingPersonnel){
this.attendingPersonnel = attendingPersonnel;
}public String getStatus(){
 return status;
}
public void setStatus(String status){
this.status = status;
}public  getNextEngagementDate(){
 return nextEngagementDate;
}
public void setNextEngagementDate( nextEngagementDate){
this.nextEngagementDate = nextEngagementDate;
}public EngagementModes getExpectedNextEngagementMode(){
 return expectedNextEngagementMode;
}
public void setExpectedNextEngagementMode(EngagementModes expectedNextEngagementMode){
this.expectedNextEngagementMode = expectedNextEngagementMode;
}public Engagement getParentEngagement(){
 return parentEngagement;
}
public void setParentEngagement(Engagement parentEngagement){
this.parentEngagement = parentEngagement;
}
@Override
public boolean equals(Object o){
 if (this == o) {
            return true;
        }
        if (o == null) {
            return false;
        }
        if (getClass() != o.getClass()) {
            return false;
        }
        final Engagement engagement = (Engagement) o; if (this.getId() == null || engagement.getId() == null) {
            return false;
        }
return this.getId().equals(engagement.getId());

}
@Override
public int hashCode(){
  return Objects.hashCode(this.id);

}
 @Override
public String getDisplayKey(){
return this.customer.getDisplayKey();
}


}
