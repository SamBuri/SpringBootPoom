/*
 Sam Buriima
generated by Saburi Tools
*/
package com.saburi.sales.writeoff;

import com.saburi.root.repositories.PagingAndSortingRepo;
import com.saburi.sales.writeoff.dtos.WriteOffRequest;
import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;
import com.saburi.root.services.BaseServiceIDGen;
import com.saburi.root.dtos.ResponseData;
import com.saburi.root.utils.KnownException;
import java.util.List;import com.saburi.sales.writeoffinvoice.WriteOffInvoice;
import java.util.ArrayList;


@Service
public class WriteOffService  extends BaseServiceIDGen<WriteOff,WriteOffRequest, String>{




private static final int RESOURCE_ID = 1;
    private static final String ENTITY_CAPTION = "Write Off";
    @Autowired
    private WriteOffRepo writeOffRepo;
@Override
public String getEntityCaption(){
 return ENTITY_CAPTION;
}
@Override
public PagingAndSortingRepo<WriteOff, String> getRepository(){
 return writeOffRepo;
}
@Override
public List<? extends ResponseData> getMiniData(){
 return writeOffRepo.findAllBy();
}
@Override
public int getResourceID(){
 return RESOURCE_ID;
}
@Override
    protected int getNextIdHelper(Object object) {
        return writeOffRepo.getMaxIdHelper().orElse(0) + 1;
    }
 @Override
    protected WriteOff modifyToSave(WriteOff writeOff) throws  Exception {
       
        if (writeOff.getId() == null) {
            writeOff.setIdHelper(this.getNextIdHelper(writeOff));
            writeOff.setId(this.getNextID(writeOff));
        }
        return writeOff;
    }@Override
public boolean isValid(WriteOff writeOff)throws Exception{
 return super.isValid(writeOff);
}
@Override
public WriteOff instantiate(){
 return new WriteOff();
}
@Override
    public WriteOff setEntity(WriteOff e, WriteOffRequest req) throws Exception{
e.setWriteOffDate(req. getWriteOffDate());
e.setCustomerId(req. getCustomerId());
e.setWriteOffType(req. getWriteOffType());
e.setAmountTendered(req. getAmountTendered());
e.setCurrencyId(req. getCurrencyId());
e.setExchangeRate(req. getExchangeRate());
e.setChangeGiven(req. getChangeGiven());
e.setAmount(req. getAmount());
e.setAmountWords(req. getAmountWords());
e.setBLPostStatus(req. isBLPostStatus());
e.setClPostStatus(req. isClPostStatus());
e.setGlPostStatus(req. isGlPostStatus());
  List<WriteOffInvoice> writeOffInvoices = new ArrayList<>();
        req. getWriteOffInvoices().forEach(t->{
        t.setWriteOff(e);
        writeOffInvoices.add(t);
        });
        e.setWriteOffInvoices(writeOffInvoices);return e;

}


}
