/*
 Sam Buriima
generated by Saburi Tools
*/
package com.saburi.sales.writeoff;

 import java.util.Objects;
 import javax.persistence.Column;
 import javax.persistence.Entity;
  import javax.persistence.Table;
 import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import com.saburi.root.entities.DBEntityGenID;
import com.saburi.root.dtos.ResponseData;
import javax.validation.constraints.NotNull;
import java.time.LocalDate;
import javax.validation.constraints.Size;
import com.saburi.sales.enums.WriteOffTypes;
import javax.persistence.Enumerated;
import javax.persistence.EnumType;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinTable;
import java.util.ArrayList;
import javax.persistence.OneToMany;
import javax.persistence.JoinColumn;
import javax.persistence.ForeignKey;
import com.saburi.sales.writeoffinvoice.WriteOffInvoice;


@Entity

@Table(name = "writeoffs")
@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
public class WriteOff extends DBEntityGenID implements ResponseData{

@NotNull(message ="The field: Write Off Date cannot be null")
@Column(name = "writeOffDate",nullable = false)private LocalDate writeOffDate;
@NotNull(message =  "The field: Customer Id cannot be null")
private String customerId;
@Size(max =  100, message =  "The field: Customer size cannot be greater than 100")
@NotNull(message =  "The field: Customer cannot be null")
@Column(length =  100)
private String customer;
@Enumerated(EnumType.STRING)
@Column(length = 20)private WriteOffTypes writeOffReason;
@Column(name = "amountTendered")private double amountTendered;
private String currencyId;
@Size(max =  100, message =  "The field: Currency size cannot be greater than 100")
@Column(length =  100)
private String currency;
@Column(name = "exchangeRate")private double exchangeRate;
@Column(name = "changeGiven")private double changeGiven;
@Column(name = "amount")private double amount;
@Size(max =  100, message =  "The field: AmountWords size cannot be greater than 100")
@Column(length =  100)
private String amountWords;
private boolean bLPostStatus;
private boolean clPostStatus;
private boolean glPostStatus;
@Column(name = "amountRecovered")private double amountRecovered;
@OneToMany(cascade = CascadeType.MERGE)@JoinTable(name = "WriteOffWriteOffInvoices",
            joinColumns = {
                @JoinColumn(name = "id", nullable = false)},
            inverseJoinColumns = {
                @JoinColumn(name = "writeOffInvoiceID", nullable = false)})private List<WriteOffInvoice> writeOffInvoices = new ArrayList<>();

public WriteOff(){
}
public  WriteOff(LocalDate writeOffDate,String customerId,WriteOffTypes writeOffReason,double amountTendered,String currencyId,double exchangeRate,double changeGiven,double amount,String amountWords,boolean bLPostStatus,boolean clPostStatus,boolean glPostStatus,List<WriteOffInvoice> writeOffInvoices){
 this.writeOffDate = writeOffDate;
this.customerId = customerId;
this.writeOffReason = writeOffReason;
this.amountTendered = amountTendered;
this.currencyId = currencyId;
this.exchangeRate = exchangeRate;
this.changeGiven = changeGiven;
this.amount = amount;
this.amountWords = amountWords;
this.bLPostStatus = bLPostStatus;
this.clPostStatus = clPostStatus;
this.glPostStatus = glPostStatus;
this.writeOffInvoices = writeOffInvoices;

}

public LocalDate getWriteOffDate(){
 return writeOffDate;
}
public void setWriteOffDate(LocalDate writeOffDate){
this.writeOffDate = writeOffDate;
}public String getCustomerId(){
 return customerId;
}
public void setCustomerId(String customerId){
this.customerId = customerId;
}public String getCustomer(){
 return customer;
}
public void setCustomer(String customer){
this.customer = customer;
}public WriteOffTypes getWriteOffType(){
 return writeOffReason;
}
public void setWriteOffType(WriteOffTypes writeOffReason){
this.writeOffReason = writeOffReason;
}public double getAmountTendered(){
 return amountTendered;
}
public void setAmountTendered(double amountTendered){
this.amountTendered = amountTendered;
}public String getCurrencyId(){
 return currencyId;
}
public void setCurrencyId(String currencyId){
this.currencyId = currencyId;
}public String getCurrency(){
 return currency;
}
public void setCurrency(String currency){
this.currency = currency;
}public double getExchangeRate(){
 return exchangeRate;
}
public void setExchangeRate(double exchangeRate){
this.exchangeRate = exchangeRate;
}public double getChangeGiven(){
 return changeGiven;
}
public void setChangeGiven(double changeGiven){
this.changeGiven = changeGiven;
}public double getAmount(){
 return amount;
}
public void setAmount(double amount){
this.amount = amount;
}public String getAmountWords(){
 return amountWords;
}
public void setAmountWords(String amountWords){
this.amountWords = amountWords;
}public boolean isBLPostStatus(){
 return bLPostStatus;
}
public void setBLPostStatus(boolean bLPostStatus){
this.bLPostStatus = bLPostStatus;
}public boolean isClPostStatus(){
 return clPostStatus;
}
public void setClPostStatus(boolean clPostStatus){
this.clPostStatus = clPostStatus;
}public boolean isGlPostStatus(){
 return glPostStatus;
}
public void setGlPostStatus(boolean glPostStatus){
this.glPostStatus = glPostStatus;
}public double getAmountRecovered(){
 return amountRecovered;
}
public void setAmountRecovered(double amountRecovered){
this.amountRecovered = amountRecovered;
}public List<WriteOffInvoice> getWriteOffInvoices(){
 return writeOffInvoices;
}
public void setWriteOffInvoices(List<WriteOffInvoice> writeOffInvoices){
this.writeOffInvoices = writeOffInvoices;
}
@Override
public boolean equals(Object o){
 if (this == o) {
            return true;
        }
        if (o == null) {
            return false;
        }
        if (getClass() != o.getClass()) {
            return false;
        }
        final WriteOff writeOff = (WriteOff) o; if (this.getId() == null || writeOff.getId() == null) {
            return false;
        }
return this.getId().equals(writeOff.getId());

}
@Override
public int hashCode(){
  return Objects.hashCode(this.id);

}
 @Override
public String getDisplayKey(){
return this.customerId.getDisplayKey();
}


}
